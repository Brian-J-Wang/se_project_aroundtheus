!function(){"use strict";class t{constructor(t,e,s,n,o){this._data=t,this._cardTemplate=e,this._cardElement=this._cardTemplate.content.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".places__image"),this._deleteButton=this._cardElement.querySelector(".places__delete"),this._heartButton=this._cardElement.querySelector(".places__heart"),this._handleImageClick=s,this._handleImageRemove=n,this._handleImageLike=o}createCard(){return this._cardImage.src=this._data.link,this._cardImage.alt=this._data.name,this._cardElement.querySelector(".places__name").textContent=this._data.name,this._data.isLiked&&this._heartButton.classList.add("places__heart_enabled"),this._setEventListeners(),this._cardElement}_setEventListeners(){this._setDeleteHandler(),this._setLikeHandler(),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage)}))}_setDeleteHandler(t){this._deleteButton.addEventListener("click",(()=>{this._handleImageRemove(this._data,this._deleteButton)}))}_setLikeHandler(t){this._heartButton.addEventListener("click",(()=>{this._handleImageLike(this._data).then((()=>{this._data.isLiked?this._heartButton.classList.add("places__heart_enabled"):this._heartButton.classList.remove("places__heart_enabled")})).catch((t=>{console.log(t)}))}))}}class e{constructor(t,e,s){this._config=e,this._formElement=t,this._formButton=document.querySelector(s),this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))})),this._toggleButtonState()}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_showInputError(t){t.classList.add(this._config.inputErrorClass);const e=this._formElement.querySelector(`.${t.id}-error`);e.textContent=t.validationMessage,e.classList.add(this._config.errorClass)}_hideInputError(t){t.classList.remove(this._config.inputErrorClass);const e=this._formElement.querySelector(`.${t.id}-error`);e.textContent="",e.classList.remove(this._config.errorClass)}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.setAttribute("disabled",""),this._buttonElement.classList.add(this._config.inactiveButtonClass)):(this._buttonElement.removeAttribute("disabled",""),this._buttonElement.classList.remove(this._config.inactiveButtonClass))}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}resetForm(){this._toggleButtonState()}}class s{constructor(t){this._popupElement=document.querySelector(t),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose=t=>{"Escape"==t.key&&this.close()};_handleOverlayClose=t=>{t.target.classList.contains("modal")&&this.close()};_handleButtonClose=()=>{this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleOverlayClose),this._popupCloseButton.addEventListener("click",this._handleButtonClose)}}class n extends s{constructor(t,e){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:()=>{};super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupSubmitButton=this._popupForm.querySelector(".modal__button"),this._popupSubmitText=this._popupSubmitButton.textContent,this._handleFormSubmit=e,this._onFormClose=s,this._inputs=this._popupForm.querySelectorAll("input")}_getInputValues(){const t={};return this._inputs.forEach((e=>{t[e.id]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._popupSubmitButton.textContent="Saving...",this._popupSubmitButton.setAttribute("disabled",""),this._handleFormSubmit(this._getInputValues()).then((()=>{this._popupSubmitButton.textContent=this._popupSubmitText,this._popupSubmitButton.removeAttribute("disabled",""),this.close()})).catch((t=>{console.error(t)}))})),super.setEventListeners()}close(){this._popupForm.reset(),this._onFormClose(),super.close()}}const o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=new class{constructor(t){this._url=t.baseUrl,this._headers=t.headers}getUserInformation(){return this._request(this._url.concat("/users/me"),{method:"GET",headers:this._headers})}updateUserInformation(t){let{name:e,about:s}=t;return this._request(this._url.concat("/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:s})})}updateAvatar(t){return this._request(this._url.concat("/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})})}getInitialCards(){return this._request(this._url.concat("/cards"),{method:"GET",headers:this._headers})}createCard(t){let{name:e,link:s}=t;return this._request(this._url.concat("/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:s})})}deleteCard(t){return this._request(this._url.concat(`/cards/${t}`),{method:"DELETE",headers:this._headers})}addLike(t){return this._request(this._url.concat(`/cards/${t}/likes`),{method:"PUT",headers:this._headers})}removeLike(t){return this._request(this._url.concat(`/cards/${t}/likes`),{method:"DELETE",headers:this._headers})}_request(t,e){return fetch(t,e).then(this._checkResponse)}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"e8616e37-d8e6-434f-880a-27a697920338","Content-Type":"application/json"}}),i=new class extends s{constructor(t){super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupSubmitButton=this._popupForm.querySelector(".modal__button"),this._popupSubmitText=this._popupSubmitButton.textContent}setEventListeners(){this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._popupSubmitButton.textContent="Deleting...",this._popupSubmitButton.setAttribute("disabled",""),this.onConfirm().then((()=>{this.close()})).catch((t=>{console.error(t)})).finally((()=>{this._popupSubmitButton.textContent=this._popupSubmitText,this._popupSubmitButton.removeAttribute("disabled","")}))})),super.setEventListeners()}onPopupConfirm(t){this.onConfirm=t,this.open()}}(".modal[id=confirmModal]");i.setEventListeners();const a=document.querySelector("#card"),l=e=>new t(e,a,c,((t,e)=>{i.onPopupConfirm((()=>r.deleteCard(t._id).then((()=>{e.closest(".places__card").remove()})).catch((t=>{console.log(t)}))))}),(t=>t.isLiked?r.removeLike(t._id).then((()=>{t.isLiked=!1})):r.addLike(t._id).then((()=>{t.isLiked=!0})))).createCard(),d=new class{constructor(t,e){this._renderer=t,this._container=document.querySelector(e)}addItem(t){this._container.prepend(t)}renderItems(t){t.forEach((t=>{const e=this._renderer(t);this._container.append(e)}))}}(l,".places");r.getInitialCards().then((t=>{d.renderItems(t)})).catch((t=>{console.log(t)}));const u=new class extends s{constructor(t){super(t),this._modalImage=this._popupElement.querySelector(".modal__image"),this._modalCaption=this._popupElement.querySelector(".modal__caption")}open(t){let{name:e,link:s}=t;this._modalImage.setAttribute("src",s),this._modalImage.setAttribute("alt",e),this._modalCaption.innerText=e,super.open()}}(".modal[id=imageModal]");function c(t){const e={name:t.getAttribute("alt"),link:t.getAttribute("src")};u.open(e)}u.setEventListeners();const h=new class{constructor(t){let{name:e,desc:s,avatar:n}=t;this._name=document.querySelector(e),this._desc=document.querySelector(s),this._avatar=document.querySelector(n)}getUserInfo(){return{name:this._name.textContent,desc:this._desc.textContent}}getAvatarInfo(){return this._avatar.getAttribute("src")}setUserInfo(t){let{name:e,desc:s}=t;this._name.textContent=e,this._desc.textContent=s}setAvatarLink(t){this._avatar.setAttribute("src",t)}}({name:".profile__name",desc:".profile__desc",avatar:".profile__avatar-image"});r.getUserInformation().then((t=>{h.setUserInfo({name:t.name,desc:t.about}),h.setAvatarLink(t.avatar)})).catch((t=>{console.log(t)}));const _=new n(".modal[id=editModal]",(t=>{const e={name:t["name-input"],about:t["desc-input"]};return r.updateUserInformation({name:e.name,about:e.about}).then((t=>{h.setUserInfo({name:t.name,desc:t.about})})).catch((t=>{console.log(t)}))}));_.setEventListeners();const m=".profile__edit",p=editModal.querySelector(".modal__input[name=name]"),v=editModal.querySelector(".modal__input[name=desc]");document.querySelector(m).addEventListener("click",(function(){const t=h.getUserInfo();p.value=t.name,v.value=t.desc,_.open()})),new e(document.forms.editModalForm,o,m).enableValidation();const E=".profile__avatar-container",b=(document.querySelector(".profile__avatar-image"),new n(".modal[id=editAvatarModal]",(t=>{const e=t["avatar-input"];return r.updateAvatar(e).then((t=>{h.setAvatarLink(t.avatar)})).catch((t=>{console.log(t)}))})));b.setEventListeners(),document.querySelector(E).addEventListener("click",(function(){b.open()})),new e(document.forms.editAvatarModalForm,o,E).enableValidation();const g=new n(".modal[id=addModal]",(t=>r.createCard({name:t["title-input"],link:t["link-input"]}).then((t=>{const e=l(t);d.addItem(e)})).then((()=>{L.resetForm()})).catch((t=>{console.log(t)}))),(()=>{L.resetForm()}));g.setEventListeners();const f=".profile__add";document.querySelector(f).addEventListener("click",(()=>{g.open()}));const L=new e(document.forms.addModalForm,o,f);L.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,